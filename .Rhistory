submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
udpate(this_moment, hours=8, minutes=34, seconds=55)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours=10, minutes=16, seconds=0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- udpate(depart, hours=17, minutes=34, seconds=0)
depart <- update(depart, hours=17, minutes=34, seconds=0)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tzone="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
GITHUB_CONSUMER_SECRET <- 0661fb5b50011ee34756eaf151c3f5d52a7112c9
GITHUB_CONSUMER_SECRET <- "0661fb5b50011ee34756eaf151c3f5d52a7112c9"
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
GITHUB_CONSUMER_SECRET <- "0661fb5b50011ee34756eaf151c3f5d52a7112c9"
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
GITHUB_CONSUMER_SECRET <- "0661fb5b50011ee34756eaf151c3f5d52a7112c9"
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
library(httr)
library(httpuv)
oauth_endpoints("github")
GITHUB_CONSUMER_SECRET <- "0661fb5b50011ee34756eaf151c3f5d52a7112c9"
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
client_id = '9a0f344b7f5c3505a67d'
client_secret = '0661fb5b50011ee34756eaf151c3f5d52a7112c9'
authorization_base_url = 'https://github.com/login/oauth/authorize'
token_url = 'https://github.com/login/oauth/access_token'
from requests_oauthlib import OAuth2Session
github = OAuth2Session(client_id)
authorization_url, state = github.authorization_url(authorization_base_url)
library(rjson)
oauth_endpoints("github")
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
req<-GET("https://api.github.com/users/jtleek/repos",config(token=github_token))
json1=content(req)
json2=jsonlite::fromJSON(toJSON(json1))
json2[4,"created_at"]
json2
library(httr)
library(httpuv)
library(rjson)
oauth_endpoints("github")
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
req<-GET("https://api.github.com/users/jtleek/repos",config(token=github_token))
json1=content(req)
json2=jsonlite::fromJSON(toJSON(json1))
json2[4,"created_at"]
json2
library(httr)
library(httpuv)
library(rjson)
oauth_endpoints("github")
myapp <- oauth_app("github", "9a0f344b7f5c3505a67d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
req<-GET("https://api.github.com/users/jtleek/repos",config(token=github_token))
json1=content(req)
json2=jsonlite::fromJSON(toJSON(json1))
json2[4,"created_at"]
json2
library(dplyr)
attach(ToothGrowth)
ToothGrowth
ToothGrowth %>%
group_by(supp) %>%
summarize(meanLen = mean(len))
ToothGrowth %>%
group_by(supp)
ToothGrowth %>%
summarize(meanLen = mean(len))
ToothGrowth %>%
group_by(supp)
ToothGrowth %>%
summarize(meanLen = mean(len))
ToothGrowth %>%
group_by(supp) %>%
summarize(meanLen = mean(len))
ToothGrowth %.%
group_by(supp, dose) %.%
summarize(meanLen = mean(len))
ToothGrowth %>%
group_by(supp, dose) %>%
summarize(meanLen = mean(len))
ToothGrowth %>%
group_by(supp, dose)
ToothGrowth %>%
mutate(dose-factor = as.factor(ToothGrowth$dose)) %>%
ToothGrowth
ToothGrowth %>%
mutate(dose.factor = as.factor(ToothGrowth$dose)) %>%
ToothGrowth
library(dplyr)
attach(ToothGrowth)
ToothGrowth
ToothGrowth %>%
mutate(dose.factor = as.factor(ToothGrowth$dose)) %>%
ToothGrowth
ToothGrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
ToothGrowth
ToothGrowth %>%
group_by(supp, dose) %>%
summarize(meanLen = mean(len))
ToothGrowth
ToothGrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
ToothGrowth
ToothGrowth %>%
mutate(dose.factor = as.factor(dose))
ToothGrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
levels(dose.factor) <- c("0.5mg", "1mg", "2mg")
ToothGrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
mutate(levels(dose.factor) = c("0.5mg", "1mg", "2mg"))
ToothGrowth %>%
mutate(dose.factor = as.factor(dose, levels=c(0.5, 1, 2), labels=c("0.5mg", "1mg", "2mg")))
ToothGrowth
ToothGrowth %>%
mutate(dose.factor = as.factor(dose, labels=c("0.5mg", "1mg", "2mg")))
ToothGrowth %>%
mutate(dose.factor = as.factor(dose))
ToothGrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
print()
test <- ToothGrowth %>%
mutate(dose.factor = as.factor(dose))
test
class(est)
class(test)
class(ToothGrowth)
test2 <- tbl_df(ToothGrowth)
class(test2)
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
print()
toothgrowth <- tbl_df(ToothGrowth)
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
print()
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
mutate(levels(dose.factor) = c("0.5mg", "1mg", "2mg")) %>%
print()
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
mutate(levels(dose.factor) = c("0.5mg", "1mg", "2mg")) %>%
print()
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
levels(dose.factor) <- c("0.5mg", "1mg", "2mg")) %>%
print()
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
levels(dose.factor) <- c("0.5mg", "1mg", "2mg") %>%
print()
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
levels(dose.factor) <- c("0.5mg", "1mg", "2mg") %>%
print()
library(dplyr)
attach(ToothGrowth)
toothgrowth <- tbl_df(ToothGrowth) # TODO: Why wasn't it needed for the previous calls??
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
levels(dose.factor) <- c("0.5mg", "1mg", "2mg") %>%
print()
toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
mutate(levels(dose.factor) = c("0.5mg", "1mg", "2mg")) %>%
print()
library(dplyr)
attach(ToothGrowth)
ToothGrowth
toothgrowth <- tbl_df(ToothGrowth) # TODO: Why wasn't it needed for the previous calls??
toothgrowth %>%
mutate(dose.factor = as.factor(dose))
toothgrowth <- tbl_df(ToothGrowth) # TODO: Why wasn't it needed for the previous calls??
toothgrowth %>%
mutate(dose.factor = as.factor(dose))
levels(dose.factor) <- c("0.5mg", "1mg", "2mg")
toothgrowth <- toothgrowth %>%
mutate(dose.factor = as.factor(dose))
levels(dose.factor) <- c("0.5mg", "1mg", "2mg")
toothgrowth <- toothgrowth %>%
mutate(dose.factor = as.factor(dose)) %>%
print()
levels(toothgrowth$dose.factor) <- c("0.5mg", "1mg", "2mg")
toothgrowth
View(toothgrowth)
library(dplyr)
library(ggplot2)
library(Lahman)
big.df = merge(Batting, Master, by="playerID")
big.df <- tbl_df(big.df)
big.df %>%
select(playerID, yearID, birthYear, HR) %>%
mutate(age = yearID - birthYear) %>%
filter(!is.na(HR)) %>%
filter(!is.na(age)) %>%
group_by(playerID) %>%
mutate(season.count = yearID - min(yearID) + 1) %>%
mutate(season.tot = max(season.count)) %>%
filter(season.tot > 10) %>%
summarise(top.HR.age = age[HR == max(HR)][1]) %>%
ggplot(., aes(x = factor(top.HR.age))) + geom_histogram()
library(dplyr)
attach(ToothGrowth)
ToothGrowth
ToothGrowth %>%
group_by(supp) %>%
summarize(meanLen = mean(len))
# Reorder the rows by 'supp'
ToothGrowth %>%
group_by(supp)
ToothGrowth %>%
summarize(meanLen = mean(len))
ToothGrowth %>%
group_by(supp, dose) %>%
summarize(meanLen = mean(len))
toothgrowth <- tbl_df(ToothGrowth) # TODO: Why wasn't it needed for the previous calls??
toothgrowth <- toothgrowth %>%
transmute(len, supp, dose = as.factor(dose)) %>% # 'len' and 'supp' are added to keep them as columns
print()
toothgrowth <- toothgrowth %>%
transmute(len, supp, dose = as.factor(dose)) %>% # 'len' and 'supp' are added to keep them as columns
print()
levels(toothgrowth$dose) <- c("0.5mg", "1mg", "2mg")
toothgrowth
date()
Sys.Date()
weekdays(Sys.Date())
?Sys.timezone
intall.packages(RFacebook)
intall.packages("RFacebook")
install.packages("RFacebook")
install.packages("Rfacebook")
install.packages("RGoogleMaps")
install.packages("RgoogleMaps")
setwd("~/github-repo/ExData_Plotting1")
# Coursera - Exploratory Data Analysis - Course Project #1 - Plot 4
## Pre-requisites: Text data file must be downloaded and unzipped in the working directory.
## Read the data in
power_consumption_data <- read.table(file="./household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
## Prep the data (i.e. 1. switching date/time format.  2. selecting the proper concerned observations)
power_consumption_data$Date <- as.Date(power_consumption_data$Date, format="%d/%m/%Y")
power_consumption_data <- power_consumption_data[power_consumption_data$Date == "2007-02-01" |
power_consumption_data$Date == "2007-02-02", ]
power_consumption_data$DateTime <- strptime(paste(power_consumption_data$Date,
" ",
power_consumption_data$Time),
format="%Y-%m-%d %H:%M:%S"
)
with(power_consumption_data, plot(Global_reactive_power,
type = "l",
col = "black",
main = "",
xlab = "datetime",
ylab = "Global_reactive_power",
xaxt = "n",
yaxt = "n"
)
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$Date == "2007-02-01", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(2, at=c(0.1, 0.2, 0.3, 0.4, 0.5),
labels=c("0.1", "0.2", "0.3", "0.4", "0.5")
)
with(power_consumption_data, plot(Global_reactive_power,
type = "l",
col = "black",
main = "",
xlab = "datetime",
ylab = "Global_reactive_power",
xaxt = "n",
yaxt = "n"
)
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$DateTime == "2007-02-01 00:00:00", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(2, at=c(0.1, 0.2, 0.3, 0.4, 0.5),
labels=c("0.1", "0.2", "0.3", "0.4", "0.5")
)
x <- rnorm(100)
x
y <- rnorm(100)
randomDates <- function(N, st="2012/01/01", et="2012/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="sec"))
ev <- sort(runif(N, 0, dt))
rt <- st + ev
}
x <- randomDates(100)
x
plot(x, y)
plot(x, y, type="l")
?rnorm
randomDates <- function(N, st="2012/01/01", et="2012/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="sec"))
ev <- sort(runif(N, 0, dt))
rt <- st + ev
}
x_dates <- randomDates(100)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y)
plot(x, y, type="l")
plot(x_dates, y)
plot(x_dates, y, type="l")
df <- cbind(x, x_dates, y)
View(df)
df$x_dates <- as.Date(df$x_dates)
class(df)
df <- data.frame(x, x_dates, y)
class(df)
View(df)
with(df, plot(x, y))
with(df, plot(x_dates, y))
with(df, plot(x_dates, y, type="l"))
with(df, plot(y ~ x_dates, type="l"))
with(df, plot(y ~ x_dates, type="l"))
with(df, lines(y ~ x, type="l"))
with(df, lines(x, type="l"))
lines(df$x, type="l")
lines(df$x, type="l", col="red")
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
lines(df$x, type="l", col="red")
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
lines(df$x, type="l", col="red")
lines(seq(df$x_dates), df$x, type="l", col="red")
plot(df$y ~ df$x_dates, type="l")
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
with(df, plot(x_dates, y, type="l"))
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
plot(df$y ~ df$x_dates, type="l") # same as previous plot (except labels)
with(df, plot(x_dates, y, type="l"))
with(df, plot(x_dates, y))
plot(x, y, col=c("red", "blue"))
x1 <- subset(x, x < 0)
x1 <- subset(x, x < 0)
plot(x1, y, col=c("red", "blue"))
x2 <- subset(x, x >= 0)
plot(x1, x2 , y, col=c("red", "blue"))
plot(x , y, col=c("red", "blue"), xaxt="n", yaxt="n")
plot(x , y, col=c("red", "blue"), xaxt=FALSE, yaxt=FALSE)
plot(x , y, col=c("red", "blue"), xaxt="n", yaxt="n")
x1 <- subset(x, x < 0)
x2 <- subset(x, x >= 0)
plot(x , y, xaxt="n", yaxt="n")
points(x1, col="red")
points(x2, col="blue")
x1
x2
points(x1, y, col="red")
plot(x , y)
points(x1, col="red")
points(x2, col="blue")
plot(x , y)
points(x1, y[x < 0], col="red")
points(x2, y[x >= 0], col="blue")
with(df, plot(x_dates[y < 0, ], y[y < 0, ], type="l"))
with(df, plot(x_dates[y < 0], y[y < 0], type="l"))
lines(x_dates[y >= 0], y[y >= 0], type="l", col="red")
with(df, plot(x_dates[y < 0], y[y < 0], type="l", col="blue"))
lines(x_dates[y >= 0], y[y >= 0], type="l", col="red")
with(df, plot(x_dates[y < 0], y[y < 0], type="l", col="blue"))
lines(x_dates[y >= 0], y[y >= 0], type="l", col="red")
plot(x, y)
points(x1, y[x < 0], col="red")
points(x2, y[x >= 0], col="blue")
