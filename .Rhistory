points(x1, y[x < 0], col="red")
points(x2, y[x >= 0], col="blue")
plot(x1, y[x < 0], col="red") # 'plot' remove all other points before
plot(x2, y[x >= 0], col="blue")
plot(df$y ~ df$x_dates, type="l") # same as previous plot (except labels)
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
with(df, plot(x, y)) # same as plotting the vectors
with(df, plot(x_dates, y))
with(df, plot(x, y)) # same as plotting the vectors
with(df, plot(x_dates, y))
with(df, plot(x_dates, y, type="l"))
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
with(df, plot(x_dates[y < 0], y[y < 0], type="l", col="blue"))
points(x_dates[y >= 0], y[y >= 0], type="l", col="red") # ERROR: not working!?!
x_dates[y < 0]
x_dates[y >= 0]
y[y < 0]
y[y >= 0]
nrow(x_dates[y >= 0])
nrow(x_dates[y >= 0])
x_dates[y >= 0]
class(x_dates)
randomDates <- function(N, st="2012/01/01", et="2012/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="sec"))
ev <- sort(runif(N, 0, dt))
rt <- st + ev
}
x_dates <- randomDates(100)
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
plot(x, y)
plot(x, y, type="l")
plot(x_dates, y)
plot(x_dates, y, type="l")
lines(x_dates, z, type="l", col="red")
plot(x_dates, y, type="l")
lines(x_dates, z, type="l", col="red")
df <- data.frame(x, x_dates, y)
df <- data.frame(x, x_dates, y, z)
with(df, plot(x, y)) # same as plotting the vectors
with(df, plot(x, y, type="l"))
with(df, plot(x, y)) # same as plotting the vectors
with(df, plot(x, y))
with(df, lines(x, z, col="red"))
with(df, points(x, z, col="red"))
with(df, plot(x, y))
with(df, points(x, z, col="red"))
x1 <- subset(x, x < 0)
x2 <- subset(x, x >= 0)
plot(x, y)
points(x1, y[x < 0], col="red", pch=1)
points(x2, y[x >= 0], col="blue", pch=2)
?plot
plot(x, y, type="n")
points(x1, y[x < 0], col="red", pch=1)
points(x2, y[x >= 0], col="blue", pch=2)
df <- data.frame(x, x_dates, y, z)
with(df, plot(x, y))
with(df, points(x, z, col="red"))
with(df, plot(x, y, type="n"))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=17))
with(df, plot(x, y, type="n"))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=37))
with(df, plot(x_dates, y))
with(df, plot(x_dates, y, type="l"))
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
plot(df$y ~ df$x_dates, type="l") # same as previous plot (except labels)
with(df, plot(x_dates[y < 0], y[y < 0], type="l", col="blue"))
points(x_dates[y >= 0], y[y >= 0], type="l", col="red") # ERROR: not working!?!
lines(x_dates[y >= 0], y[y >= 0], type="l", col="red") # ERROR: not working!?!
with(df, plot(x, y)) # same as plotting the vectors
with(df, plot(x, y, type="l")) # again, a line doesn't make sense in that scenario
with(df, plot(x, y))
with(df, points(x, z, col="red"))
with(df, plot(x, y, type="n"))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=37))
with(df, plot(x, y, type="n"))
with(df, plot(x, y, type="n", axes=FALSE))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=37))
with(df, axis(1, at=seq(x[1], d[100], length.out=25),
labels=seq(x[1], d[100], length.out=25)
))
with(df, axis(1, at=seq(x[1], x[100], length.out=25),
labels=seq(x[1], x[100], length.out=25)
))
with(df, plot(x, y, type="n"))
with(df, plot(x, y, type="n", axes=FALSE))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=37))
with(df, axis(1, at=seq(min(x), max(x), length.out=1),
labels=seq(min(x), max(x), length.out=1)
))
seq(min(x), max(x), length.out=1)
with(df, plot(x, y, type="n", axes=FALSE))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=37))
with(df, axis(1, at=seq(min(x), max(x)),
labels=seq(min(x), max(x))
))
abs(-2)
with(df, plot(x, y, type="n", axes=FALSE))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=37))
with(df, axis(1, at=seq(floor(min(x)), ceiling(max(x))),
labels=seq(floor(min(x)), ceiling(max(x)))
))
with(df, axis(2, at=seq(floor(min(y)), ceiling(max(y))),
labels=seq(floor(min(y)), ceiling(max(y)))
))
with(df, axis(3, at=seq(floor(min(z)), ceiling(max(z))),
labels=seq(floor(min(z)), ceiling(max(z)))
))
with(df, axis(4, at=seq(floor(min(z)), ceiling(max(z))),
labels=seq(floor(min(z)), ceiling(max(z)))
))
with(df, plot(x, y, type="n", axes=FALSE))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=37))
with(df, axis(1, at=seq(floor(min(x)), ceiling(max(x))),
labels=seq(floor(min(x)), ceiling(max(x)))
))
with(df, axis(2, at=seq(floor(min(y)), ceiling(max(y))),
labels=seq(floor(min(y)), ceiling(max(y)))
))
with(df, axis(4, at=seq(floor(min(z)), ceiling(max(z))),
labels=seq(floor(min(z)), ceiling(max(z)))
))
with(df, plot(x, y, type="n", axes=FALSE))
with(df, points(x, y, col="blue", pch=21))
with(df, points(x, z, col="red", pch=37))
axis(1, at=seq(floor(min(x)), ceiling(max(x))),
labels=seq(floor(min(x)), ceiling(max(x)))
)
with(df, axis(2, at=seq(floor(min(y)), ceiling(max(y))),
labels=seq(floor(min(y)), ceiling(max(y)))
))
with(df, axis(4, at=seq(floor(min(z)), ceiling(max(z))),
labels=seq(floor(min(z)), ceiling(max(z)))
))
seq(1, 5)
seq(1, 5, by=0.5)
seq_along(along.with=df$x)
seq_along(along.with=df$x, length.out=25)
seq_along(along.with=df$x, by=0.5)
seq(1, 100, along.with=df$x)
seq(1, 200, along.with=df$x)
seq(1, 200, along.with=df$x, by=0.5)
seq(1)
plot(seq(3) + 0.9)
seq(3)
seq(3) + 0.9
plot(df$y)
with(df, plot(x_dates, y))
with(df, plot(x_dates, y, type="l"))
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
with(df, plot(x_dates, y, type="l"))
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
plot(df$y ~ df$x_dates, type="l") # same as previous plot (except labels)
source('~/github-repo/ExData_Plotting1/plot2.R')
setwd("~/github-repo/ExData_Plotting1")
source('~/github-repo/ExData_Plotting1/plot2.R')
with(df, plot(x_dates, y))
with(df, plot(x_dates, y, type="l"))
with(df, plot(y ~ x_dates, type="l")) # same as previous plot
plot(df$y ~ df$x_dates, type="l") # same as previous plot (except labels)
with(df, plot(x_dates[y < 0], y[y < 0], type="l", col="blue"))
points(x_dates[y >= 0], y[y >= 0], type="l", col="red") # ERROR: not working!?!
lines(x_dates[y >= 0], y[y >= 0], type="l", col="red") # ERROR: not working!?!
lines(x_dates[y >= 0], y[y >= 0], col="red") # ERROR: not working!?!
y1 <- y[y < 0]
y2 <- y[y >= 0]
with(df, plot(x_dates, y, type="n"))
lines(x_dates[y < 0], y1, col="blue")
lines(x_dates[y >= 0], y2, col="red") # ERROR: not working!?!
with(df, plot(x_dates, y, type="n"))
lines(x_dates[y < 0], y[y < 0], col="blue")
lines(x_dates[y >= 0], y[y >= 0], col="red") # ALL GOOD!!
with(df, plot(x_dates, y, type="n"))
points(x_dates[y < 0], y[y < 0], col="blue")
points(x_dates[y >= 0], y[y >= 0], col="red") # ALL GOOD!!  No neeed to create the subset var
randomDates <- function(N, st="2012/01/01", et="2012/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="sec"))
ev <- sort(runif(N, 0, dt))
rt <- st + ev
}
x_dates <- randomDates(100)
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
df <- data.frame(x, x_dates, y, z)
with(df, plot(x_dates, y, type="n"))
lines(x_dates[y < 0], y[y < 0], col="blue")
lines(x_dates[y >= 0], y[y >= 0], col="red") # ALL GOOD!!  No neeed to create the subset var
with(df, plot(x_dates[y < 0], y[y < 0], type="l", col="blue"))
with(df, plot(x_dates[y < 0], y[y < 0], type="n", col="blue"))
lines(x_dates[y >= 0], y[y >= 0], col="red") # ERROR: not working!?!
with(df, plot(x_dates, y, type="n", col="blue"))
lines(x_dates[y >= 0], y[y >= 0], col="red") # ERROR: not working!?!
with(df, plot(x_dates, y, type="n", col="blue"))
points(x_dates[y >= 0], y[y >= 0], type="l", col="red") # ERROR: not working!?!
with(df, plot(x_dates, y, type="n", col="blue"))
lines(x_dates[y >= 0], y[y >= 0], type="l", col="red") # ERROR: not working!?!
with(df, plot(x_dates, y, type="l", col="blue"))
points(x_dates[y >= 0], y[y >= 0], type="l", col="red") # Wasn't working because of the x and y specified.
lines(x_dates[y >= 0], y[y >= 0], type="l", col="red") # Wasn't working because of the x and y specified.
with(df, plot(x_dates[y < 0], y[y < 0], type="l", col="blue"))
with(df, plot(x_dates, y, type="n"))
lines(x_dates[y < 0], y[y < 0], col="blue")
lines(x_dates[y >= 0], y[y >= 0], col="red") # ALL GOOD!!  No neeed to create the subset var
with(df, plot(x_dates, y, type="l", col="blue"))
lines(x_dates[y >= 0], y[y >= 0], col="red") # Wasn't working because of the x and y specified (ranges calculated?).
with(df, plot(x_dates, y, type="n"))
lines(x_dates[y < 0], y[y < 0], col="blue")
lines(x_dates[y >= 0], y[y >= 0], col="red") # ALL GOOD!!  No neeed to create the subset var
with(df, plot(x_dates, y[y < 0], type="l", col="blue")) # ERROR: OK to draw but points aren't divided as expected.
## Pre-requisites: Text data file must be downloaded and unzipped in the working directory.
## Read the data in
power_consumption_data <- read.table(file="./household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
## Prep the data (i.e. 1. switching date/time format.  2. selecting the proper concerned observations)
power_consumption_data$Date <- as.Date(power_consumption_data$Date, format="%d/%m/%Y")
power_consumption_data <- power_consumption_data[power_consumption_data$Date == "2007-02-01" |
power_consumption_data$Date == "2007-02-02", ]
hist(power_consumption_data$Global_active_power,
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
ylab = "Frequency",
#xlim = c(0, 6),
#ylim = c(0, 1200),
col = "red"
)
hist(power_consumption_data$Global_active_power,
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
ylab = "Frequency",
#xlim = c(0, 6),
ylim = c(0, 1200),
col = "red"
)
hist(power_consumption_data$Global_active_power,
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
ylab = "Frequency",
#xlim = c(0, 6),
ylim = c(0, 1200),
col = "red"
)
hist(power_consumption_data$Global_active_power,
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)",
ylab = "Frequency",
#xlim = c(0, 6),
ylim = c(0, 1200),
col = "red"
)
## Pre-requisites: Text data file must be downloaded and unzipped in the working directory.
## Read the data in
power_consumption_data <- read.table(file="./household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
## Prep the data (i.e. 1. switching date/time format.  2. selecting the proper concerned observations)
power_consumption_data$Date <- as.Date(power_consumption_data$Date, format="%d/%m/%Y")
power_consumption_data <- power_consumption_data[power_consumption_data$Date == "2007-02-01" |
power_consumption_data$Date == "2007-02-02", ]
with(power_consumption_data, plot(Global_active_power,
type = "l",
main = "",
xlab = "",
ylab = "Global Active Power (kilowatts)",
col = "black",
xaxt = "n",
yaxt = "n"
)
)
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$Date == "2007-02-01", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(2, at=c(0, 2, 4, 6),
labels=c("0", "2", "4", "6")
)
## Pre-requisites: Text data file must be downloaded and unzipped in the working directory.
## Read the data in
power_consumption_data <- read.table(file="./household_power_consumption.txt", header=TRUE, sep=";", na.strings="?")
## Prep the data (i.e. 1. switching date/time format.  2. selecting the proper concerned observations)
power_consumption_data$Date <- as.Date(power_consumption_data$Date, format="%d/%m/%Y")
power_consumption_data <- power_consumption_data[power_consumption_data$Date == "2007-02-01" |
power_consumption_data$Date == "2007-02-02", ]
with(power_consumption_data, plot(Sub_metering_1,
type = "l",
col = "black",
main = "",
xlab = "",
ylab = "Energy sub metering",
xaxt = "n",
yaxt = "n"
)
)
lines(power_consumption_data$Sub_metering_2, type="l", col="red")
lines(power_consumption_data$Sub_metering_3, type="l", col="blue")
axis(1, at=c(1,
nrow(power_consumption_data[power_consumption_data$Date == "2007-02-01", ]),
nrow(power_consumption_data)),
labels = c("Thu", "Fri", "Sat")
)
axis(2, at=c(0, 10, 20, 30),
labels=c("0", "10", "20", "30")
)
legend("topright",
lty=1,
col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(df, plot(x_dates, y, type="n"))
lines(x_dates[y < 0], y[y < 0], col="blue")
lines(x_dates[y >= 0], y[y >= 0], col="red") # ALL GOOD!!  No neeed to create the subset var
points(x_dates[y < 0], y[y < 0], col="blue") # Same as previous but in points
points(x_dates[y >= 0], y[y >= 0], col="red") # ALL GOOD!!
install.packages("ggplot2")
library(ggplot2)
library(datasets)
qplot(displ, hwy, data=mpg)
str(mpg)
qplot(displ, hwy, data=mpg, col=drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(displ, hwy, data=mpg, facets=drv~., binwidth=2)
qplot(displ, hwy, data=mpg, facets=drv~.)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
randomDates <- function(N, st="2012/01/01", et="2012/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="sec"))
ev <- sort(runif(N, 0, dt))
rt <- st + ev
}
x_dates <- randomDates(100)
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
ggplot(df, aes(x, y))
class(df)
df <- data.frame(x, x_dates, y, z)
ggplot(df, aes(x, y))
g <- ggplot(df, aes(x, y))
p <- g + geom_point()
p
summary(g)
summary(p)
q <- g + geom_point() + geom_smooth()
q
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method="lm") ## equivalent to printing 'q'
z[z < 0]
z < 0
zf <- z[z < 0]
zf <- factor(c(TRUE,FALSE), levels=c("Factor True", "Factor False"))
df <- data.frame(x, x_dates, y, z, zf)
str(df)
head(df)
zf
zf <- factor(zf, c(TRUE,FALSE), levels=c("Factor True", "Factor False"))
zf
zf <- factor(zf, levels=c("Factor True", "Factor False"))
zf
zf <- factor(zf, labels=c("Factor True", "Factor False"))
zf <- factor(zf, levels=c(TRUE, FALSE), labels=c("Factor True", "Factor False"))
zf
zf <- factor(zf, labels=c("Factor True", "Factor False"))
zf <- z[z < 0]
zf <- factor(zf, labels=c("Factor True", "Factor False"))
zf <- z[z < 0]
zf
zf <- z < 0
zf <- factor(zf, labels=c("Factor True", "Factor False"))
zf
df <- data.frame(x, x_dates, y, z, zf)
str(df)
ggplot(df, aes(x, y)) # ERROR: No layers in plot; no plot done yet!!  Doesn't know how to draw it!
g <- ggplot(df, aes(x, y))
summary(g)
p <- g + geom_point() # Which is adding the layer...
summary(p)
p ## Now that's working - the geom_point function specifies how to draw it!
q <- g + geom_point() + geom_smooth()
q
g + geom_point() + geom_smooth() ## equivalent to printing 'q'
g + geom_point() + geom_smooth(method="lm") ## same as before but different 'smooth'
g + geom_point() + facet_grid(. ~ zf) + geom_smooth(method="lm")
g + geom_point() + facet_grid(. ~ zf) + geom_smooth(method="lm") + xlab("Martin's Title")
g + geom_point() + facet_grid(. ~ zf) + geom_smooth(method="lm") + xlab("Martin's Title") + theme_bw()
g + geom_point(color = "steelblue", size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(method="lm") +
xlab("Martin's Title") +
theme_bw()
g + geom_point(aes(color=zf), size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(method="lm") +
xlab("Martin's Title") +
theme_bw()
g + geom_point(aes(color=zf), size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(method="lm") +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...")
theme_bw()
g + geom_point(aes(color=zf), size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(size=2, method="lm") +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...")
theme_bw()
g + geom_point(aes(color=zf), size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(size=2, method="lm") +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...")
theme_bw(base_family="Times")
g + geom_point(aes(color=zf), size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(size=2, method="lm") +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...")
theme_bw()
g_dates <- ggplot(df, aes(x_dates, y))
g_dates + geom_line()
g_dates + geom_line(aes(color=zf), size=4, alpha=1/2)
g_dates + geom_line(aes(color=zf), size=1, alpha=1/2)
g_dates + geom_line(aes(color=zf), size=1, alpha=1/2) +
facet_grid(. ~ zf)
g + geom_point(aes(color=zf), size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(size=2, method="lm") +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...") +
theme_bw(base_family="Times")
g_dates + geom_line(aes(color=zf), size=1, alpha=1/2) +
facet_grid(. ~ zf) +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...") +
theme_bw(base_family="Times")
g_dates + geom_line(aes(color=zf), size=1, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(size=2, method="lm") +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...") +
theme_bw(base_family="Times")
g_dates + geom_line(aes(color=zf), size=1, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(size=1) +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...") +
theme_bw(base_family="Avenir")
g_dates + geom_line(aes(color=zf), size=1, alpha=1/2) +
geom_line(z)
g_dates2 <- ggplot(df, aes(x_dates, y, z))
g_dates2 + geom_line(aes(color=zf), size=1, alpha=1/2) +
geom_line(z)
g_dates2 + geom_line(aes(color=zf), size=1, alpha=1/2)
g_dates2 + geom_line()
g_dates2 <- ggplot(df, aes(x_dates, z))
g_dates2 + geom_line()
g_dates2 <- ggplot(df, aes(x_dates, y, z))
g_dates2 + geom_line()
g_dates2 + geom_line(aes(color=zf), size=1, alpha=1/2)
g_dates3 <- ggplot(df, aes(x_dates))
g_dates3 + geom_line(aes(y = y), size=1, alpha=1/2) +
geom_line(aes(y = z), size=1.5, alpha=1/2)
g_dates2 <- ggplot(df, aes(x_dates, y, z)) ## ERROR: 'z' is omitted; how to draw 2 lines?
g_dates2 + geom_line()
ggplot(df, aes(x, y)) # ERROR: No layers in plot; no plot done yet!!  Doesn't know how to draw it!
g <- ggplot(df, aes(x, y))
summary(g)
p <- g + geom_point() # Which is adding the layer...
summary(p)
p ## Now that's working - the geom_point function specifies how to draw it!
q <- g + geom_point() + geom_smooth()
q
g + geom_point() + geom_smooth() ## equivalent to printing 'q'
g + geom_point() + geom_smooth(method="lm") ## same as before but different 'smooth'
g + geom_point() + facet_grid(. ~ zf) + geom_smooth(method="lm")
g + geom_point() + facet_grid(. ~ zf) + geom_smooth(method="lm") + xlab("Martin's Title") + theme_bw()
g + geom_point(color = "steelblue", size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(method="lm") +
xlab("Martin's Title") +
theme_bw()
g + geom_point(aes(color=zf), size=4, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(size=2, method="lm") +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...") +
theme_bw(base_family="Times")
g_dates <- ggplot(df, aes(x_dates, y))
g_dates + geom_line()
g_dates + geom_line(aes(color=zf), size=1, alpha=1/2)
g_dates + geom_line(aes(color=zf), size=1, alpha=1/2) +
facet_grid(. ~ zf) +
geom_smooth(size=1) +
xlab("Martin's Title") +
labs(title="Martin's BIG Title...") +
theme_bw(base_family="Avenir")
install.packages("knitr")
install.packages("slidify")
